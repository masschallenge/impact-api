sudo: required

language: python

services: docker

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.10.1
      # get all the branches referencing this commit
    - IS_RELEASE=$(git ls-remote origin | grep "$TRAVIS_COMMIT\s\+refs/heads/release$")
    - RELEASE_TAG=$(git tag -l --points-at HEAD | head -n1)

before_install:
- sudo apt-add-repository 'deb http://archive.ubuntu.com/ubuntu trusty-backports universe'
- sudo apt-get update -qq
- docker-compose --version
- sudo apt-get update
- sudo apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y docker-ce
- sudo rm /usr/local/bin/docker-compose
- curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
- chmod +x docker-compose
- sudo mv docker-compose /usr/local/bin
- docker-compose --version

before_script:
- export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
- if [ -z $TRAVIS_TAG ]; then git remote set-branches origin $BRANCH; fi
- git fetch
- git checkout $BRANCH
- echo "" >> .prod.env
- keys="DJANGO_SECRET_KEY IMPACT_API_V0_SECURITY_KEY IMPACT_API_V0_IMAGE_PASSWORD"
- for key in $keys; do echo "$key=${!key}" >> .prod.env; echo "" >> .prod.env; done
- echo "DATABASE_URL=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}/${DATABASE_NAME}" >> .prod.env
- echo "" >> .prod.env
- docker-compose -f travis.docker-compose.yml build --no-cache
- docker-compose -f travis.docker-compose.yml up -d 

script:
- make test

after_success:
- if [ "$DEPLOY_ENVIRONMENT" = "" ]; then export DEPLOY_ENVIRONMENT=$(if [ "$BRANCH" = "master" ]; then echo "production"; else echo "staging"; fi); fi;
- sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest;
- sudo chmod +x /usr/local/bin/ecs-cli;
- pip install awscli;
- export PATH=$PATH:$HOME/.local/bin;
- export TAG=$(if [ "$RELEASE_TAG" = "" ]; then echo "$BRANCH"; else echo "$RELEASE_TAG"; fi);
- export ECR_TOKEN=`aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken' | cut -d':' -f2`
- export ECR_HOST=$(aws ecr get-authorization-token --output text --query 'authorizationData[].proxyEndpoint')
- export DOCKER_USER=AWS
- export DOCKER_PASSWORD=$ECR_TOKEN
- echo DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $ECR_HOST
- make travis-release AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY ENVIRONMENT=$DEPLOY_ENVIRONMENT DOCKER_REGISTRY=$DOCKER_REGISTRY IMAGE_TAG=$TAG;
